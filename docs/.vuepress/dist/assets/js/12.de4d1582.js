(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{229:function(n,t,e){"use strict";e.r(t);var a=e(0),s=Object(a.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("上一章已经讲了 vuepress 主题如何实现继承，这样我们可以任意修改默认主题的任何组件及样式了。我们知道 vuepress 是无法自动根据我们 markdown 文件中的")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("---\ntags:\n- js\n- vue\n---\n")])])]),e("p",[n._v("生成标签云的页面的，而一个博客，标签在其中有知识分类及导航功能，是必不可少的一环，下面带领大家来改造一下默认主题让它能支持自动生成标签云页面")]),n._v(" "),e("h2",{attrs:{id:"第一步配置的修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一步配置的修改","aria-hidden":"true"}},[n._v("#")]),n._v(" 第一步配置的修改")]),n._v(" "),e("p",[n._v("既然是主题，就要提供可定制化，如果有人不需要 tag 功能，那也需要满足需求，打开 config.js 文件，修改其中的配置\n")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('themeConfig: {\n    ...\n    tags:"/tags",\n    ...\n    nav: [\n    ...\n        {\n            text:"标签云",\n            link:\'/tags/\',\n            tags:true\n        },\n    ...\n    ]\n    ...\n}\n')])])]),e("p",[n._v('我这样配置的原因是 nav 是给头部目录添加菜单，tags:"/tags"是定义标签路由路径，这样不管我的标签页定义成什么名字，都能导航到正确的位置。')]),n._v(" "),e("h2",{attrs:{id:"第二步文件夹建立"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二步文件夹建立","aria-hidden":"true"}},[n._v("#")]),n._v(" 第二步文件夹建立")]),n._v(" "),e("p",[n._v("由于 vuepress 是根据 markdown 文件生成的路由，所以想要生成一个标签的页面也必须建立一个 markdown 文件。\n在.vuepress 文件夹下建立 tags 文件夹，其中新建 README.md 文件。\n重启项目\n可看到"),e("img",{attrs:{src:"https://blog-1253495453.cos.ap-chongqing.myqcloud.com/a.png",alt:"启动图片"}})]),n._v(" "),e("h2",{attrs:{id:"第三步新建-tags-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三步新建-tags-组件","aria-hidden":"true"}},[n._v("#")]),n._v(" 第三步新建 Tags 组件")]),n._v(" "),e("p",[n._v("在 docs/.vuepress/theme/components 下新建 Tags.vue 文件。\n为了使页面自动集成 tag 组件，需要修改 Layout.vue 组件，上一节我们讲过要修改默认主题可以用组件的继承，现在把默认主题的 Layout 组件复制到 docs/.vuepress/theme/layouts 目录下(如果不知道如何复制默认主题的 Layout 请看上一节)，修改其中的")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('...\n    </Sidebar>\n    \x3c!-- 侧边栏 --\x3e\n    <Home v-if="$page.frontmatter.home"/>\n    \x3c!-- 如果md文件中有 home:true 就使用该组件 --\x3e\n    <Tags v-else-if="tags"/>\n    <Page\n        v-else\n        :sidebar-items="sidebarItems"\n        >\n            <slot\n            name="page-top"\n            slot="top"\n            />\n            <slot\n            name="page-bottom"\n            slot="bottom"\n            />\n    </Page>\n...\n')])])]),e("p",[n._v("引入 Tags 组件，其中的 tags 是判断当前页面路由 tags 是否为 true，这是 config.js 中配置的选项。\n在新建的 Tags.vue 文件中加入以下内容")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n  <div>\n    <div class="content default"></div>\n    <div class="tag">\n      <div class="items">\n        <span\n          v-for="taginfo in tags"\n          :style="{backgroundColor:color()}"\n          @click="change(taginfo.tag)"\n          :class="taginfo.tag===tg?\'active\':\'\'"\n        >{{taginfo.tag}}({{taginfo.number}})</span>\n      </div>\n      <div class="article-list">\n        <Article v-for="tag in info" :tag="tag" :tg="tg" @turnTo="change"/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Article from "@theme/components/Article.vue";\nexport default {\n  components: {\n    Article\n  },\n  data() {\n    return {\n      info: [],\n      tg: ""\n    };\n  },\n  computed: {\n    tags() {\n      //核心代码，整合markdown中tags的数目\n      let allTags = [];\n      this.$site.pages.forEach(v => {\n        if (v.frontmatter.tags) {\n          allTags.push(v.frontmatter.tags);\n        } else if (v.frontmatter.tag) {\n          allTags.push(v.frontmatter.tag);\n        }\n      });\n      allTags = allTags.join(",").split(",");\n      let flatTags = Array.from(new Set(allTags));\n      return flatTags.reduce((res, v) => {\n        let o = {};\n        o.tag = v;\n        o.number = allTags.filter(value => value === v).length;\n        res.push(o);\n        return res;\n      }, []);\n    }\n  },\n  methods: {\n    change(tag) {\n      //点击标签下面文章显示对应的内容\n      this.tg = tag;\n      this.info = this.$site.pages.filter(v => {\n        let tags = v.frontmatter.tags;\n        if (tags) {\n          return tags.some(v => v === tag);\n        }\n      });\n    },\n    color() {\n      // 标签button颜色\n      let colors = [\n        "#3498DB",\n        "#3EAF7C",\n        "#5CBBF6",\n        "#f5A28E",\n        "#f2AC3B",\n        "#FA6551",\n        "#C68CE0"\n      ];\n      return colors[parseInt(Math.random() * colors.length)];\n    }\n  },\n  mounted() {\n    //当路由?tag=\'xxx\'时能自动跳转到对应内容\n    let tag = this.$route.query.tag;\n    if (tag) {\n      this.change(tag);\n    }\n  }\n};\n<\/script>\n\n<style lang=\'stylus\' scoped>\n.tag {\n  max-width: 46.5rem;\n  margin: 0 auto;\n  padding: 0 2.5rem;\n\n  .items {\n    margin-bottom: 2rem;\n\n    span {\n      vertical-align: middle;\n      cursor: pointer;\n      margin: 0.5rem 0.5rem 0.2rem;\n      padding: 0.4rem 0.7rem;\n      display: -webkit-inline-box;\n      display: -ms-inline-flexbox;\n      display: inline-flex;\n      border-radius: 0.2rem;\n      background: #fff;\n      color: #fff;\n      font-size: 1rem;\n      box-shadow: 0 1px 0.25rem 0 hsla(0, 0%, 57%, 0.21);\n      transition: all 0.3s;\n      background-color: red;\n\n      &.active {\n        transform: scale(1.2);\n      }\n\n      &:hover {\n        transform: scale(1.2);\n      }\n    }\n  }\n}\n</style>\n\n')])])]),e("p",[n._v("其中 Article 组件是显示文章内容的部分，大家也可自行定义组件及样式，我贴上自己的 Article 组件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n  <div class="abstract">\n    <div class="abstract-item">\n      <div class="text-hover">\n        <router-link :to="tag.path">{{tag.title}}</router-link>\n      </div>\n      \x3c!----\x3e\n      <div class="abstract">\n        <div class="tip custom-block" v-if="tag.excerpt">\n          \x3c!-- <p class="custom-block-title">{{tag.title}}</p>\n            <p>个人一些自动的 vs code 配置(Settings.json)</p>\n            <ul>\n            <li>VsCode 常用插件配置</li>\n          </ul>--\x3e\n          <div v-html="tag.excerpt"></div>\n        </div>\n      </div>\n      <div class="details-btn">\n        <router-link :to="tag.path">\n          <div data-v-e422eb16 class="v-btn">\n            <i data-v-e422eb16 class="what"></i>\n            阅读全文\n          </div>\n        </router-link>\n      </div>\n      <div class="v-divider"></div>\n      <div class="article-info article-info-item">\n        <i class="what">\n          <em v-if="tag.lastUpdated">{{tag.lastUpdated}}</em>\n        </i>\n        <i class="what" v-for="t in tag.frontmatter.tags">\n          <em class="text-item active" v-if="t==tg">{{t}}</em>\n          <em class="text-item" v-else @click="$emit(\'turnTo\',t)">{{t}}</em>\n        </i>\n        \x3c!-- <i\n            class="iconfont h-classify article-info-item"\n            class="what"\n            >\n            <em class="text-item">IDE</em>\n        </i>--\x3e\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    tag: {}, //索引到的数据\n    tg: ""\n  }\n};\n<\/script>\n\n<style lang="stylus" scoped>\n$color = #3eaf7c;\n\n.abstract {\n  margin-top: 1rem;\n  width: 100%;\n\n  .abstract-item {\n    margin: 0 auto 1.2rem;\n    padding: 1rem 1.2rem;\n    width: 100%;\n    overflow: hidden;\n    border-radius: 0.3rem;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    -webkit-transition: all 0.3s;\n    transition: all 0.3s;\n    -webkit-box-shadow: 0 0.25rem 1.2rem 0 hsla(0, 0%, 57%, 0.21);\n    box-shadow: 0 0.25rem 1.2rem 0 hsla(0, 0%, 57%, 0.21);\n    background-color: #fff;\n    position: relative;\n\n    .abstract {\n    }\n\n    .text-hover {\n      position: relative;\n      font-size: 1.2rem;\n      line-height: 2rem;\n      display: inline-block;\n\n      a {\n        &:after {\n          content: \'\';\n          position: absolute;\n          width: 101%;\n          height: 2px;\n          bottom: 0;\n          left: 0;\n          background-color: $color;\n          visibility: hidden;\n          -webkit-transform: scaleX(0);\n          transform: scaleX(0);\n          -webkit-transition: 0.3s ease-in-out;\n          transition: 0.3s ease-in-out;\n        }\n\n        &:hover:after {\n          visibility: visible;\n          -webkit-transform: scaleX(1);\n          transform: scaleX(1);\n        }\n      }\n    }\n\n    .details-btn {\n      text-align: right;\n      margin: 0.6rem 0;\n\n      .v-btn {\n        display: inline-block;\n        font-size: 0.8rem;\n        padding: 0.4rem 0.7rem;\n        cursor: pointer;\n        letter-spacing: 0.1em;\n        -webkit-transition: all 0.3s;\n        transition: all 0.3s;\n        background-color: #efefef;\n        color: #2c3e50;\n        border-radius: 0.1rem;\n        line-height: 1.2;\n\n        &:hover {\n          background-color: $color;\n          color: #fff;\n        }\n      }\n    }\n\n    .article-info {\n      margin-right: 1rem;\n      line-height: 1.6rem;\n      margin-right: 1rem;\n      line-height: 1.6rem;\n      font-style: normal;\n\n      .text-item {\n        font-weight: 700;\n        border: 1px $color;\n        font-style: normal;\n        margin-left: 0.4rem;\n        cursor: pointer;\n        background-color: #f6f6f6;\n        padding: 0.2rem 0.4rem;\n\n        &.active {\n          color: $color;\n        }\n\n        &:hover {\n          color: $color;\n        }\n      }\n    }\n\n    .v-divider {\n      display: block;\n      -webkit-box-flex: 1;\n      -ms-flex: 1 1 0px;\n      flex: 1 1 0px;\n      max-width: 100%;\n      height: 0;\n      max-height: 0;\n      border: solid;\n      border-width: thin 0 0 0;\n      -webkit-transition: inherit;\n      transition: inherit;\n      border-color: rgb(234, 236, 239);\n      margin-top: 0.7rem;\n      margin-bottom: 0.7rem;\n    }\n  }\n}\n\n.what {\n  font-size: 0.8rem;\n  color: rgb(153, 153, 153);\n}\n</style>\n\n')])])]),e("p",[n._v("至此，标签云页面已经完成，效果如下\n"),e("img",{attrs:{src:"https://blog-1253495453.cos.ap-chongqing.myqcloud.com/tags.png",alt:"标签云效果"}})]),n._v(" "),e("h2",{attrs:{id:"第四步-页面显示标签页及标签页跳转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第四步-页面显示标签页及标签页跳转","aria-hidden":"true"}},[n._v("#")]),n._v(" 第四步 页面显示标签页及标签页跳转")]),n._v(" "),e("p",[n._v("把默认主题中 components 下的 Page.vue 文件复制到 docs/.vuepress/theme/components 中，\n修改其中内容")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<slot name="top"/>\n\x3c!-- 以下是添加的内容 --\x3e\n<section class="tags" v-if="this.$site.themeConfig.tags&&tags&&tags.length>0">\n    \x3c!-- tags是this.$page.frontmatter.tags，这是通过vuepress编译markdown文件中的tags生成的标签数组。 --\x3e\n    <span class="tagPopup" v-for="tag in tags">\n        \x3c!-- $site.themeConfig.tags是config.js中配置的tags目录 --\x3e\n        <router-link :to="\'/\'+$site.themeConfig.tags+\'/?tag=\'+tag" class="tag">{{tag}}</router-link>\n    </span>\n</section>\n\x3c!-- 以上是添加的内容 --\x3e\n<Content/>\n\n')])])]),e("p",[n._v("修改后效果如下\n"),e("img",{attrs:{src:"https://blog-1253495453.cos.ap-chongqing.myqcloud.com/page.png",alt:"page修改效果"}})])])},[],!1,null,null,null);t.default=s.exports}}]);